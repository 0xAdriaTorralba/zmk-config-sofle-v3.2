#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/rgb.h>

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10
#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT
#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  //  600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    retro-tap;
    require-prior-idle-ms = <200>;
};

/ {
    behaviors {
        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;      // 0
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   //   10
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    num_tab: num_tab {
        compatible = "zmk,behavior-hold-tap";
        label = "NUM_TAB";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick-tap-ms = <100>;
        require-prior-idle-ms = <100>;
        hold-trigger-key-positions = <13>;
    };

    service_mode: service_mode {
        compatible = "zmk,behavior-hold-tap";
        label = "SERVICE_MODE";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <150>;
        hold-trigger-key-positions = <0>;
    };

    cmd_t: cmd_t {
        compatible = "zmk,behavior-hold-tap";
        label = "CMD_T";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <150>;
        require-prior-idle-ms = <125>;
        flavor = "tap-preferred";
        hold-trigger-key-positions = <18>;
    };

    c_trencada: c_trencada {
        compatible = "zmk,behavior-hold-tap";
        label = "C_TRENCADA";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick-tap-ms = <50>;
        flavor = "tap-preferred";
        hold-trigger-key-positions = <42>;
    };

    enya: enya {
        compatible = "zmk,behavior-hold-tap";
        label = "ENYA";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick-tap-ms = <50>;
        flavor = "tap-preferred";
        hold-trigger-key-positions = <46>;
    };

    generic_tap_hold: generic_tap_hold {
        compatible = "zmk,behavior-hold-tap";
        label = "GENERIC_TAP_HOLD";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <150>;
        quick-tap-ms = <50>;
        require-prior-idle-ms = <125>;
        flavor = "tap-preferred";
        hold-trigger-key-positions = <12 11 37>;
    };

    cmd_space: cmd_space {
        compatible = "zmk,behavior-tap-dance";
        label = "CMD_SPACE";
        #binding-cells = <0>;
        bindings = <&mo 1>, <&kp LG(SPACE)>;

        tapping-term-ms = <200>;
    };

    alt_space: alt_space {
        compatible = "zmk,behavior-tap-dance";
        label = "ALT_SPACE";
        #binding-cells = <0>;
        bindings = <&mo 2>, <&kp LA(SPACE)>;

        tapping-term-ms = <200>;
    };

    lhmod: lhmod {
        compatible = "zmk,behavior-hold-tap";
        label = "LHMOD";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        require-prior-idle-ms = <175>;
        flavor = "tap-preferred";
        hold-trigger-key-positions = <26 40 39 41 42 0 1 11 13 14 15 16 17 18 19 20 21 22 23 24 26 31 32 33 34 35 36 37 39 40 41 42 43 44 45 46 47 48 49 50 52 53 54 55 56 57 58 59 60 61 62 63 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 58 61 62 63 30>;
        quick-tap-ms = <50>;
    };

    rhmod: rhmod {
        compatible = "zmk,behavior-hold-tap";
        label = "RHMOD";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        require-prior-idle-ms = <175>;
        flavor = "tap-preferred";
        hold-trigger-key-positions = <0 0 1 11 12 13 14 15 16 17 18 19 25 26 27 28 29 30 31 32 33 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 25 26 27 28 29 30 31 32 33 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 58 34 35 36 37>;
    };

    ctrl_q: ctrl_q {
        compatible = "zmk,behavior-tap-dance";
        label = "CTRL_Q";
        #binding-cells = <0>;
        bindings = <&mo 1>, <&kp LC(Q)>;

        tapping-term-ms = <200>;
    };

    macros {
        sleep: sleep {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LG(EQUAL)))>;
            label = "SLEEP";
        };

        next_page: next_page {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SINGLE_QUOTE)>;
            label = "NEXT_PAGE";
        };

        previous_page: previous_page {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SEMICOLON)>;
            label = "PREVIOUS_PAGE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&service_mode LS(LA(APOSTROPHE)) GRAVE  &kp N1               &kp N2          &kp N3                   &kp N4             &kp N5                &kp UP_ARROW     &kp N6             &kp N7              &kp N8              &kp N9          &generic_tap_hold LS(MINUS) MINUS            &generic_tap_hold EQUAL N0
&num_tab 4 TAB                          &kp Q                &kp W           &kp E                    &kp R              &cmd_t LG(T) T        &kp DOWN_ARROW   &rhmod LEFT_GUI Y  &rhmod RIGHT_GUI U  &rhmod RIGHT_ALT I  &rhmod RCTRL O  &rhmod RIGHT_SHIFT P                         &kp RBKT
&kp CAPS                                &lhmod LEFT_SHIFT A  &lhmod LCTRL S  &lhmod LEFT_ALT D        &lhmod LEFT_GUI F  &lhmod RIGHT_GUI G    &kp LEFT_ARROW   &kp H              &kp J               &kp K               &kp L           &generic_tap_hold LEFT_BRACKET SINGLE_QUOTE  &kp ENTER
&kp LSHFT                               &kp Z                &kp X           &c_trencada BACKSLASH C  &kp V              &kp B                 &kp RIGHT_ARROW  &enya SEMICOLON N  &kp M               &kp COMMA           &kp DOT         &kp FSLH                                     &kp RSHFT
&kp C_MUTE                              &kp LCTRL            &kp LALT        &ctrl_q                  &kp BSPC           &cmd_space            &kp ENTER        &alt_space         &kp SPACE           &kp RGUI            &kp RALT        &kp RCTRL
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
            display-name = "default";
        };

        lower_layer {
            bindings = <
&kp ESCAPE  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5    &mmv MOVE_UP     &kp F6             &kp F7                &kp F8                 &kp F9                &kp F10              &trans
&trans      &trans  &trans  &trans  &trans  &trans    &mmv MOVE_DOWN   &kp LS(NUMBER_4)   &kp LS(N8)            &kp LS(N9)             &trans                &trans               &trans
&trans      &trans  &trans  &trans  &trans  &trans    &mmv MOVE_LEFT   &kp LS(N7)         &kp RA(LEFT_BRACKET)  &kp RA(RIGHT_BRACKET)  &kp RS(LEFT_BRACKET)  &trans               &trans
&trans      &trans  &trans  &trans  &trans  &trans    &mmv MOVE_RIGHT  &kp RA(SEMICOLON)  &kp RA(SINGLE_QUOTE)  &kp RA(BACKSLASH)      &kp NON_US_BSLH       &kp LS(NON_US_BSLH)  &trans
&kp C_MUTE  &trans  &trans  &trans  &trans  &trans    &mkp LCLK        &trans             &trans                &trans                 &trans                &trans
            >;

            display-name = "lower";
            sensor-bindings = <&scroll_encoder>;
        };

        raise_layer {
            display-name = "raise";
            bindings = <
&kp GRAVE   &kp F1  &kp F2  &kp F3  &kp F4      &kp F5    &kp K         &kp F6          &kp F7          &kp F8        &kp F9      &kp F10  &kp F11
&trans      &trans  &trans  &trans  &trans      &trans    &kp J         &kp LC(Q)       &kp LC(W)       &kp HOME      &kp HOME    &trans   &kp F12
&trans      &trans  &trans  &trans  &trans      &trans    &kp UP_ARROW  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT   &trans   &trans
&trans      &trans  &trans  &trans  &trans      &trans    &kp DOWN      &previous_page  &kp PAGE_DOWN   &kp PAGE_UP   &next_page  &trans   &trans
&kp C_MUTE  &trans  &trans  &trans  &kp DELETE  &trans    &kp ESC       &trans          &trans          &trans        &trans      &trans
            >;

            sensor-bindings = <&inc_dec_kp C_BRI_INC C_BRI_DEC>;
        };

        adjust_layer {
            display-name = "adjust";
            bindings = <
&kp GRAVE   &kp F1  &kp F2           &kp F3           &kp F4           &kp F5             &mmv MOVE_UP     &kp F6           &kp F7      &kp F8    &kp F9      &kp F10  &kp F11
&trans      &trans  &trans           &trans           &trans           &trans             &mmv MOVE_DOWN   &trans           &trans      &trans    &trans      &trans   &trans
&trans      &trans  &trans           &trans           &trans           &to 5              &mmv MOVE_LEFT   &kp PG_DN        &trans      &trans    &trans      &trans   &trans
&trans      &trans  &rgb_ug RGB_EFF  &rgb_ug RGB_TOG  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI    &mmv MOVE_RIGHT  &rgb_ug RGB_BRI  &kp C_PREV  &kp C_PP  &kp C_NEXT  &kp F12  &trans
&kp C_MUTE  &trans  &trans           &trans           &trans           &trans             &mkp LCLK        &trans           &trans      &trans    &trans      &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        numeric_layer {
            display-name = "num";
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &trans  &trans  &kp PERCENT  &kp LS(N7)             &trans  &trans
&trans      &kp TAB       &kp LS(TAB)   &trans        &trans        &trans          &mmv MOVE_DOWN   &kp N7  &kp N8  &kp N9       &kp LS(RIGHT_BRACKET)  &trans  &trans
&trans      &trans        &sleep        &trans        &trans        &trans          &mmv MOVE_LEFT   &kp N4  &kp N5  &kp N6       &kp SLASH              &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &mmv MOVE_RIGHT  &kp N1  &kp N2  &kp N3       &kp RIGHT_BRACKET      &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &mkp LCLK        &trans  &kp N0  &kp DOT      &kp RETURN             &trans
            >;

            sensor-bindings = <&scroll_encoder>;
            label = "num";
        };

        game_layer {
            display-name = "game";
            bindings = <
&service_mode LS(LA(APOSTROPHE)) GRAVE  &kp N1     &kp N2    &kp N3                   &kp N4    &kp N5        &kp UP_ARROW     &kp N6             &kp N7     &kp N8     &kp N9    &generic_tap_hold LS(MINUS) MINUS            &generic_tap_hold EQUAL N0
&kp TAB                                 &kp Q      &kp W     &kp E                    &kp R     &kp T         &kp DOWN_ARROW   &kp Y              &kp U      &kp I      &kp O     &kp P                                        &kp RBKT
&kp CAPS                                &kp A      &kp S     &kp D                    &kp F     &kp G         &kp LEFT_ARROW   &kp H              &kp J      &kp K      &kp L     &generic_tap_hold LEFT_BRACKET SINGLE_QUOTE  &kp ENTER
&kp LSHFT                               &kp Z      &kp X     &c_trencada BACKSLASH C  &kp V     &kp B         &kp RIGHT_ARROW  &enya SEMICOLON N  &kp M      &kp COMMA  &kp DOT   &kp FSLH                                     &kp RSHFT
&kp C_MUTE                              &kp LCTRL  &kp LALT  &kp LGUI                 &kp BSPC  &cmd_space    &to 0            &alt_space         &kp SPACE  &kp RGUI   &kp RALT  &kp RCTRL
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOLUME_UP>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
